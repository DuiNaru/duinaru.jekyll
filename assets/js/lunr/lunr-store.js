var store = [{
        "title": "개발과 경험이 함께 하는 블로그",
        "excerpt":"평소에 생각하던 이것저것을 적어볼까 하다가 블로그를 만들게 되었습니다.   블로그를 운영한다면 블로그 서비스를 이용하는 편이 간단하고 편할 듯 했지만, github.io 라는 도메인이 눈에 들어오더군요.   그래서 github pages로 만들게 되었습니다.   준비물   github   github pages를 서비스할 repository를 만들었습니다.   jekyll   github pages는 jekyll을 지원합니다.   jekyll로 만든 소스를 repository에 올려 두는 것 만으로도 빌드-배포를 해주죠.   ruby   jekyll로 만들려면 ruby가 필요합니다.   build를 하거나, plugin을 설치해서 기능을 추가해볼 수 있습니다.   만들기   ruby   jekyll의 build와 여러 plugin을 설치하기 위해 설치해주었습니다.   jekyll 공식 홈페이지에 사용 방법이 친절히 적혀있어서 별 어려움이 없었습니다.   다국어 지원   적어도 2개국어로 운영할 생각이니, 다국어 지원을 위해 polygot plugin을 설치해 주었습니다.   이 플러그인이 github pages에서 공식적으로 지원하는 플러그인이 아니기에, 단순히 repository에 소스를 올려두는 것으로 빌드가 되지 않습니다.   하지만, 다 방법이 있죠.   테마 선택하기   이 과정에서 시간이 상당히 걸렸습니다.   이걸로 해볼까 저걸로 해볼까 하면서 고르다가 시간이 순식간에 지나가네요.   결국에는 Minimal Mistakes로 하기로 했습니다.   하지만, 여기서 문제가 발생하였습니다.      build할 때, 에러가 발생해요.     polyglot plugin이 작동하질 않아요.     문제 해결   windows환경에서 build할 때, 문자 관련 에러 해결   ruby를 windows환경에서 쓰려다 보니 발생하는 에러 였습니다.           vscode에서 cmd로 빌드 하고 있었기에, chcp 65001 을 이용해서 UTF-8로 바꿔서 해결했습니다.   다르게는 jekyll을 에러가 발생하지 않는 버전으로 바꾸는 방법도 있으나, 아래의 문제로 인해 버전을 제한 할 수 밖에 없었습니다.   Minimal Mistakes과 polygot plugin을 함께 사용하기   웹 페이지가 제대로 만들어 지지 않는 문제가 발생하였습니다.   시행착오 끝에, 다음과 같이 해결이 되었습니다.   jekyll버전   jekyll를 3.8.6으로 사용하니, polygot plugin과 함께 작동합니다.   polyglot plugin의 _config.xml설정           languages의 언어 설정 순서를 default_lang에서 설정한 언어를 먼저 오게 설정하니 polygot plugin이 잘 작동합니다.   기능 추가   언어 선택   다국어 지원을 위해 언어를 바꾸는 기능을 추가해 주었습니다.   페이지 하단에 보이는 KO나 JA같은 것이죠.   댓글   Minimal Mistakes에서도 지원하는 disqus를 이용해서 추가했습니다.   후기   만들다 보니 시간이 꽤나 흘렀습니다.   앞으로는 글도 쓰면서, 이것저것 업데이트 해 볼까 합니다.  ","categories": [],
        "tags": [],
        
        "url": "https://duinaru.github.io/2019/10/23/blog-with-development-and-experience",
        
        "teaser":null},{
        "title": "GitHub Pages에서 지원하지 않는 플러그인 쓰기",
        "excerpt":"jekyll을 공식적으로 지원하는 GitHub Pages이지만, 모든 jekyll의 플러그인까지 지원하는 것은 아닙니다.   GitHub Pages는  지원하는 플러그인이 제한 되어있습니다.   이 이외의 플러그인은 GitHub Pages에서 jekyll을 build할때, 제한되어 적용되지 않습니다.   그럼, GitHub Pages에서 jekyll로 웹 페이지 서비스를 만들 때는 일부 플러그인만 사용해야 하는 것 일까요?   반은 맞고 반은 틀립니다.   알아보기 전에, 먼저 어떻게 GitHub Pages가  jekyll를 쓰는지 살펴봅시다.   GitHub Pages with jekyll source   GitHub Pages에서 jekyll을 쓰는 간단한 방법입니다.   공식 도움말에서도 설명하는 방법처럼 jekyll 소스를 repository에 올려두고 GitHub Pages가 jekyll을 build를 하는 방법입니다.   GitHub Pages에서 문제 없이 사용가능한 플러그인으로 제한을 하니, plugin의 호환성 같은 문제들에 대해 신경 덜 쓰고 만들 수 있다는 장점이 있습니다.   GitHub Pages without jekyll source   GitHub Pages는 기본적으로 정적 웹 페이지 호스팅 서비스이므로, jekyll소스가 아닌 웹 파일만 있어도 서비스가 가능합니다.   즉, 무엇으로 만들었던, 서비스에 필요한 파일만 있으면 문제 없다는 것입니다.   이러한 파일들은 jekyll로 build를 할 때, 하위 디렉토리인 _site에 생기니, 이 파일을 직접 GitHub Pages의 repository에 올려서 사용해도 문제 없이 서비스 할 수 있습니다.   GitHub Pages에서 지원하지 않는 jekyll의 Plugin으로 만든 파일이라도 말이죠.   GitHub Pages with an unsupported plugin   지원하지 않는 plugin이라도 로컬에서 build를 한 뒤에 웹 파일만 올리면, 서비스가 가능하게 됩니다.   이를 위해서 우선 어떤 branch가 GitHub Pages로 설정 되어 있는지 확인 해 볼 필요가 있습니다.   repository의 settings에서 GitHub Pages라는 항목을 찾아 볼 수 있습니다.           저는 master branch를 사용중이라고 확인 할 수 있었습니다.   그러므로, master branch에 jekyll로 build한 파일들을 올려두면, GitHub Pages를 서비스 할 수 있게 됩니다.   소스랑 파일을 분리해서 관리   master branch에 build된 파일을 올리니, 소스는 분리하고 싶어졌습니다.   그래서 sources라는 branch를 만들고 소스는 해당 branch에만 push를 하고 있습니다.   하지만, build된 파일은 master branch에 push해야 하니, 매번 branch를 변경해서 push를 해야하는 번거로움이 생겼습니다.   이를 모두 수작업으로 하려면 실수도 하기 마련이고, 번거로우니 아래와 같은 PowerShell Script를 만들어서 자동화하였습니다.   PowerShell Script  chcp 65001 $env:JEKYLL_ENV = 'production' rm -r _site/* git clone -b master https://github.com/DuiNaru/duinaru.github.io.git _site bundle exec jekyll build cd _site git add -A git commit -am 'jekyll build' git push   build시 문자 오류를 해결하기 위한 chcp 65001 과 jekyll을 production환경으로 build하기 위한 $env:JEKYLL_ENV = 'production'이 포함되어있습니다.   jekyll을 production환경으로 build를 해서 올리는 이유에 대해서는 다음에 설명하도록 하겠습니다.   이걸로 지원하지 않는 플러그인이라도 GitHub Pages에 서비스 할 수 있게 되었습니다.  ","categories": [],
        "tags": [],
        
        "url": "https://duinaru.github.io/2019/10/26/how-to-make-a-github-pages-work-with-an-unsupported-plugin",
        
        "teaser":null},{
        "title": "Blog에 댓글 기능을 추가하였습니다",
        "excerpt":"사용하고 있는 Minimal Mistakes 테마는 여러 댓글 서비스를 사용할 수 있게 설정 할 수 있어서, 사용해보았습니다.   댓글을 사용할 페이지에 comment: true를 추가하고, _config.xml에 사용할 서비스와 정보를 입력하기만 하면 됩니다.   이번에는 disqus라는 댓글 서비스를 사용해 보았습니다.   disqus에 가입한 뒤에 사이트를 생성해주고, ShortName을 알면 됩니다.   shortname은 사이트를 생성할 때, 또는 생성하고 설정 화면에서도 알 수 있습니다.      site생성          site설정       그런다음에, _config.xml 에 설정하면 됩니다.   가입하고 테마에 사용 설정만 하면 되니 간단하네요.   이제 확인 해봅시다.      안 보이네요.     이유를 찾아봅시다.   이상합니다. 아무리 봐도 위의 설정으로 될 것 같은데요.   그래서, Minimal Mistakes 테마에서 disqus와 관련된 comment소스를 찾아 봤습니다.      _includes\\comments.html      disqus를 위해 section을 만들고 있습니다.   그래서 이번엔 해당 html을 include하는 파일을 찾아봤습니다.      _layouts\\single.html      single 레이아웃 페이지의 일부입니다.   무언가의 조건으로 include를 하고 있는게 보입니다.   site.comments.provider 은 _config.xml 에서 설정했고, page.comments 는 true 로 설정해 두었죠.      jekyll.environment == ‘production’ 는 뭐죠?     아, Minimal Mistakes  comment설정 의 Note가 이 내용인듯 하군요!   jekyll을 production환경으로 build하기   jekyll build 옵션에서 Environment를 설정할 수 있습니다.   이 값는 jekyll.environment로 알아낼 수 있으며,  build 설정에 따라 다른 결과물을 출력 할 수 있게 해줍니다.   Minimal Mistakes 는 production으로 build된 경우에만 comment를 사용하도록 하였기 때문에, build시 Environment를 production으로 설정해야합니다.   GitHub Pages에서 build를 하는 경우라면 자동적으로 production으로 설정되어 build가 되나, 필자는 local에서 build를 하고 있기에 따로 설정을 해주었습니다.   linux환경이였다면 Environment페이지 처럼 하면 되지만, windows라면 다릅니다.   cmd인 경우  set JEKYLL_ENV=production   powershell인 경우  $env:JEKYLL_ENV = 'production'   해당 명령어 뒤에 build나 serve를 하면 production으로 만들어집니다.   이로써, Minimal Mistakes 에 댓글 기능을 추가할 수 있었습니다.  ","categories": [],
        "tags": [],
        
        "url": "https://duinaru.github.io/2019/11/03/experience-using-comments-with-minimal-mistakes",
        
        "teaser":null}]
