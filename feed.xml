<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DuiNaru's Blog</title>
    <description>Blog with development and experience</description>
    <link>https://duinaru.github.io/</link>
    <atom:link href="https://duinaru.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 17 Nov 2019 11:56:56 +0900</pubDate>
    <lastBuildDate>Sun, 17 Nov 2019 11:56:56 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>Rails 화면 띄우기 및 Cloud9 사용</title>
        <description>&lt;p&gt;샘플 화면 하나를 띄우고, 본격적인 개발에 앞서 IDE를 사용하기로 하였습니다.&lt;/p&gt;

&lt;h2 id=&quot;blog-생성&quot;&gt;blog 생성&lt;/h2&gt;

&lt;p&gt;blog라는 이름의 rails 어플을 생성하였습니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails new blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;해당 명령어로 미리 설정되어 있는 blog 어플리케이션을 가져와서 다운로드한다네요.&lt;/p&gt;

&lt;h2 id=&quot;에러-발생&quot;&gt;에러 발생&lt;/h2&gt;

&lt;p&gt;설치는 되었는데, 중간에 에러가 나왔네요. 역시 한번에 되는건 없나봅니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Gem::Ext::BuildError: ERROR: Failed to build gem native extension.
current directory: /tmp/bundler20191116-12860-iie6sqlite3-1.4.1/gems/sqlite3-1.4.1/ext/sqlite3
/usr/bin/ruby2.5 -r ./siteconf20191116-12860-3nvvhf.rb extconf.rb
checking for sqlite3.h... no
sqlite3.h is missing. Try 'brew install sqlite3',
'yum install sqlite-devel' or 'apt-get install libsqlite3-dev'
and check your shared library search path (the
location where your sqlite3 shared library is located).
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sqlite3 1.4.1가 제대로 설치되지 않았다고 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install sqlite3 -v '1.4.1'&lt;/code&gt;을 해보니 마찬가지로 에러가 나와서 다음 명령어로 해결하였습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libsqlite3-dev
sudo gem update
bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;잘 설치되었습니다. rails를 한번 실행해봐야 곘네요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;또-에러&quot;&gt;또, 에러&lt;/h2&gt;

&lt;p&gt;에러가 나오는 군요.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/var/lib/gems/2.5.0/gems/webpacker-4.2.0/lib/webpacker/configuration.rb:95:in `rescue in load': Webpacker configuration file not found /home/ubuntu/blog/config/webpacker.yml.
Please run rails webpacker:install Error: No such file or directory @ rb_sysopen - /home/ubuntu/blog/config/webpacker.yml (RuntimeError)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;webpacker을 설치해달라는 군요.&lt;/p&gt;

&lt;p&gt;우선, node.js를 설치해줍니다. 이후 yarn을 설치하고, webpacker를 설치했습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -
sudo apt-get install -y nodejs
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install yarn
rails webpacker:install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 되었습니다. rails 서버도 기동하는 군요.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-16-develop-using-cloud9\rails-server.png&quot; alt=&quot;rails server&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;접속해보기&quot;&gt;접속해보기&lt;/h2&gt;

&lt;p&gt;로컬 환경이였다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:3000&lt;/code&gt;으로 접속이 가능했겠지만, ec2라서 살짝 설정을 바꿔주었습니다.&lt;/p&gt;

&lt;h3 id=&quot;포트를-80-을-접속-가능하도록-security-group-설정-변경&quot;&gt;포트를 80 을 접속 가능하도록 Security Group 설정 변경&lt;/h3&gt;

&lt;p&gt;EC2의 Security Group의 Inbound에 80포트를 설정해주었습니다.&lt;/p&gt;

&lt;h3 id=&quot;000080-으로-서버-기동&quot;&gt;0.0.0.0:80 으로 서버 기동&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails server -b 0.0.0.0 -p 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;접속&quot;&gt;접속&lt;/h3&gt;

&lt;p&gt;EC2의 공인 ip로 접속해보았습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;서버 실행 중&lt;/em&gt;
&lt;img src=&quot;\assets\images\2019-11-16-develop-using-cloud9\rails-server-80.png&quot; alt=&quot;rails server -b 0.0.0.0 -p 80&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;메인 화면&lt;/em&gt;
&lt;img src=&quot;\assets\images\2019-11-16-develop-using-cloud9\success.png&quot; alt=&quot;main page&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;드디어 메인 화면이 나왔습니다. 이제부터는 본격적인 개발이 될 듯 하네요.&lt;/p&gt;

&lt;h2 id=&quot;cloud9-설정&quot;&gt;Cloud9 설정&lt;/h2&gt;

&lt;p&gt;그 전에, IDE를 설정했습니다.&lt;/p&gt;

&lt;p&gt;SSH 접속으로 설정하면 어떤 IDE도 사용할 수 있으나, AWS에 만들어 봤으니, IDE도 AWS를 사용해보았습니다.&lt;/p&gt;

&lt;p&gt;Cloud9은 EC2로 처음부터 바로 환경 구축을 할 수도 있지만, 이번에는 미리 만든 EC2가 있으니 만들어 둔 EC2를 사용하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/cloud9/latest/user-guide/create-environment-ssh.html&quot;&gt;Creating an SSH Environment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;앞으로 계속 같은 ip 접속하기 위해 elastic ip을 할당하고, 위의 도움말에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/authorized_keys&lt;/code&gt;를 만드는 과정을 했습니다.&lt;/p&gt;

&lt;p&gt;이후, AWS Cloud9 Installer가 실행되어서 이것저것 설치되었습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-16-develop-using-cloud9\AWS-Cloud9-Installer.png&quot; alt=&quot;AWS Cloud9 Installer&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;설치가 끝난 다음, 하단의 bash에 &lt;code class=&quot;highlighter-rouge&quot;&gt;rails server -b 0.0.0.0 -p 80&lt;/code&gt;으로 서버를 실행하고 접속 할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;이제 본격적으로 개발을 할 수 있겠네요.&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Nov 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/2019/11/16/develop-using-cloud9</link>
        <guid isPermaLink="true">https://duinaru.github.io/2019/11/16/develop-using-cloud9</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>aws</category>
        
        <category>cloud9</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>ruby on rails를 ec2에 구축해보았습니다</title>
        <description>&lt;p&gt;ruby를 알게 되었으니 ruby를 이용한 웹 사이트 한번 만들어보고싶어서  ruby on rails로 개발을 시작하였습니다.&lt;/p&gt;

&lt;p&gt;개발을 하면서 동시에 ruby on rails를 익히려는 목적이므로 기본적인 환경 구축부터 시작하였습니다.&lt;/p&gt;

&lt;h2 id=&quot;ec2-생성&quot;&gt;EC2 생성&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;AMI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;편하게 ubuntu(Ubuntu Server 18.04 LTS (HVM), SSD Volume Type)를 선택하였습니다.&lt;/p&gt;

&lt;p&gt;나머지 설정은 free-tier 가능한 설정으로 생성했습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security groups&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SSH 접속 가능하게 22포트는 열어두고, 나머지는 나중에 설정하면서 열어주었습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;클릭 몇 번에 생성이 끝났습니다. 고마워요. AWS&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;설치&quot;&gt;설치&lt;/h2&gt;

&lt;p&gt;SSH로 접속해서, 차근차근 설치를 진행합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt; 의 &lt;a href=&quot;https://guides.rubyonrails.org/getting_started.html&quot;&gt;Getting Started with Rails&lt;/a&gt; 를 바탕으로 진행하였습니다.&lt;/p&gt;

&lt;h3 id=&quot;패키지-업데이트&quot;&gt;패키지 업데이트&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ruby-설치&quot;&gt;Ruby 설치&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install ruby-full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ruby-버전-확인&quot;&gt;Ruby 버전 확인&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;rails에서 요구하는 ruby 2.5.0이후 버전인지 확인합니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-14-set-up-ruby-on-rails-ec2\ruby-v.png&quot; alt=&quot;ruby -v&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;2.5.대 버전이군요.&lt;/p&gt;

&lt;h3 id=&quot;sqlite3-설치&quot;&gt;sqlite3 설치&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install sqlite3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sqlite3-버전-확인&quot;&gt;sqlite3 버전 확인&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlite3 --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rails-설치&quot;&gt;rails 설치&lt;/h3&gt;
&lt;p&gt;드디어 rails를 설치할 차례입니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install rails
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;설치-에러&quot;&gt;설치 에러&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-14-set-up-ruby-on-rails-ec2\error_nokogiri.png&quot; alt=&quot;Error on installing rails about nokogiri&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Could not create Makefile due to some reason, probably lack of necessary libraries and/or headers.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;설치 중간에 에러가 나왔습니다. Nokogiri 에서 일부 라이브러리가 없어서 생기는 에러 같군요.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nokogiri.org/&quot;&gt;Nokogiri 홈페이지&lt;/a&gt;에서 해결법을 찾아봅시다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nokogiri.org/tutorials/installing_nokogiri.html#install-with-system-libraries&quot;&gt;install-with-system-libraries&lt;/a&gt;처럼 설치하니 되는 군요.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install pkg-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;rails 설치를 계속 합니다.&lt;/p&gt;

&lt;h3 id=&quot;rails-버전-확인&quot;&gt;rails 버전 확인&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-14-set-up-ruby-on-rails-ec2\rails--version.png&quot; alt=&quot;rails --version&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;드디어 설치 완료했습니다. 중간에 에러 나서 당황했네요.&lt;/p&gt;

&lt;p&gt;다음엔, &lt;a href=&quot;https://guides.rubyonrails.org/getting_started.html#creating-the-blog-application&quot;&gt;Creating the Blog Application&lt;/a&gt;으로 메인 화면까지 띄우도록 해보겠습니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Nov 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/2019/11/14/set-up-ruby-on-rails-ec2</link>
        <guid isPermaLink="true">https://duinaru.github.io/2019/11/14/set-up-ruby-on-rails-ec2</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>aws</category>
        
        <category>ec2</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Blog에 댓글 기능을 추가하였습니다</title>
        <description>&lt;p&gt;사용하고 있는 Minimal Mistakes 테마는 여러 댓글 서비스를 사용할 수 있게 &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/configuration/#comments&quot;&gt;설정&lt;/a&gt; 할 수 있어서, 사용해보았습니다.&lt;/p&gt;

&lt;p&gt;댓글을 사용할 페이지에 &lt;code class=&quot;highlighter-rouge&quot;&gt;comment: true&lt;/code&gt;를 추가하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.xml&lt;/code&gt;에 사용할 서비스와 정보를 입력하기만 하면 됩니다.&lt;/p&gt;

&lt;p&gt;이번에는 disqus라는 댓글 서비스를 사용해 보았습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://disqus.com/&quot;&gt;disqus&lt;/a&gt;에 가입한 뒤에 사이트를 &lt;a href=&quot;http://disqus.com/admin/create&quot;&gt;생성&lt;/a&gt;해주고, &lt;a href=&quot;https://help.disqus.com/en/articles/1717111-what-s-a-shortname&quot;&gt;ShortName&lt;/a&gt;을 알면 됩니다.&lt;/p&gt;

&lt;p&gt;shortname은 사이트를 생성할 때, 또는 생성하고 설정 화면에서도 알 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://disqus.com/admin/create&quot;&gt;site생성&lt;/a&gt;
 &lt;img src=&quot;\assets\images\2019-11-03-experience-using-comments-with-minimal-mistakes\create-site.png&quot; alt=&quot;shortname&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://disqus.com/admin/settings/general/&quot;&gt;site설정&lt;/a&gt;
 &lt;img src=&quot;/assets\images\2019-11-03-experience-using-comments-with-minimal-mistakes\shortname.png&quot; alt=&quot;shortname&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;그런다음에, &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.xml&lt;/code&gt; 에 &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/configuration/#disqus&quot;&gt;설정&lt;/a&gt;하면 됩니다.&lt;/p&gt;

&lt;p&gt;가입하고 테마에 사용 설정만 하면 되니 간단하네요.&lt;/p&gt;

&lt;p&gt;이제 확인 해봅시다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;안 보이네요.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;이유를 찾아봅시다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이상합니다. 아무리 봐도 위의 설정으로 될 것 같은데요.&lt;/p&gt;

&lt;p&gt;그래서, Minimal Mistakes 테마에서 disqus와 관련된 comment소스를 찾아 봤습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;_includes\comments.html
&lt;img src=&quot;/assets\images\2019-11-03-experience-using-comments-with-minimal-mistakes\comments.png&quot; alt=&quot;comments.html&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;disqus를 위해 section을 만들고 있습니다.&lt;/p&gt;

&lt;p&gt;그래서 이번엔 해당 html을 include하는 파일을 찾아봤습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;_layouts\single.html
&lt;img src=&quot;\assets\images\2019-11-03-experience-using-comments-with-minimal-mistakes\single.png&quot; alt=&quot;single&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;single 레이아웃 페이지의 일부입니다.&lt;/p&gt;

&lt;p&gt;무언가의 조건으로 include를 하고 있는게 보입니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;site.comments.provider&lt;/code&gt; 은 &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.xml&lt;/code&gt; 에서 설정했고, &lt;code class=&quot;highlighter-rouge&quot;&gt;page.comments&lt;/code&gt; 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 로 설정해 두었죠.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;jekyll.environment == ‘production’ 는 뭐죠?&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;아, Minimal Mistakes  &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/configuration/#comments&quot;&gt;comment설정&lt;/a&gt; 의 Note가 이 내용인듯 하군요!&lt;/p&gt;

&lt;h1 id=&quot;jekyll을-production환경으로-build하기&quot;&gt;jekyll을 production환경으로 build하기&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/configuration/options/#build-command-options&quot;&gt;jekyll build 옵션&lt;/a&gt;에서 &lt;a href=&quot;https://jekyllrb.com/docs/configuration/environments/&quot;&gt;Environment&lt;/a&gt;를 설정할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이 값는 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll.environment&lt;/code&gt;로 알아낼 수 있으며,  build 설정에 따라 다른 결과물을 출력 할 수 있게 해줍니다.&lt;/p&gt;

&lt;p&gt;Minimal Mistakes 는 production으로 build된 경우에만 comment를 사용하도록 하였기 때문에, build시 Environment를 production으로 설정해야합니다.&lt;/p&gt;

&lt;p&gt;GitHub Pages에서 build를 하는 경우라면 자동적으로 production으로 설정되어 build가 되나, 필자는 local에서 build를 하고 있기에 따로 설정을 해주었습니다.&lt;/p&gt;

&lt;p&gt;linux환경이였다면 &lt;a href=&quot;https://jekyllrb.com/docs/configuration/environments/&quot;&gt;Environment&lt;/a&gt;페이지 처럼 하면 되지만, windows라면 다릅니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;cmd인 경우&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set JEKYLL_ENV=production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;powershell인 경우&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$env:JEKYLL_ENV = 'production'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 명령어 뒤에 build나 serve를 하면 production으로 만들어집니다.&lt;/p&gt;

&lt;p&gt;이로써, Minimal Mistakes 에 댓글 기능을 추가할 수 있었습니다.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Nov 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/2019/11/03/experience-using-comments-with-minimal-mistakes</link>
        <guid isPermaLink="true">https://duinaru.github.io/2019/11/03/experience-using-comments-with-minimal-mistakes</guid>
        
        <category>jekyll</category>
        
        <category>ruby</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>GitHub Pages에서 지원하지 않는 플러그인 쓰기</title>
        <description>&lt;p&gt;jekyll을 공식적으로 지원하는 GitHub Pages이지만, 모든 jekyll의 플러그인까지 지원하는 것은 아닙니다.&lt;/p&gt;

&lt;p&gt;GitHub Pages는  &lt;a href=&quot;http://pages.github.com/versions/&quot;&gt;지원하는 플러그인&lt;/a&gt;이 제한 되어있습니다.&lt;/p&gt;

&lt;p&gt;이 이외의 플러그인은 GitHub Pages에서 jekyll을 build할때, 제한되어 적용되지 않습니다.&lt;/p&gt;

&lt;p&gt;그럼, GitHub Pages에서 jekyll로 웹 페이지 서비스를 만들 때는 일부 플러그인만 사용해야 하는 것 일까요?&lt;/p&gt;

&lt;p&gt;반은 맞고 반은 틀립니다.&lt;/p&gt;

&lt;p&gt;알아보기 전에, 먼저 어떻게 GitHub Pages가  jekyll를 쓰는지 살펴봅시다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Pages with jekyll source&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub Pages에서 jekyll을 쓰는 간단한 방법입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll&quot;&gt;공식 도움말&lt;/a&gt;에서도 설명하는 방법처럼 jekyll 소스를 repository에 올려두고 GitHub Pages가 jekyll을 build를 하는 방법입니다.&lt;/p&gt;

&lt;p&gt;GitHub Pages에서 문제 없이 사용가능한 플러그인으로 제한을 하니, plugin의 호환성 같은 문제들에 대해 신경 덜 쓰고 만들 수 있다는 장점이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Pages without jekyll source&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub Pages는 기본적으로 정적 웹 페이지 호스팅 서비스이므로, jekyll소스가 아닌 웹 파일만 있어도 서비스가 가능합니다.&lt;/p&gt;

&lt;p&gt;즉, 무엇으로 만들었던, 서비스에 필요한 파일만 있으면 문제 없다는 것입니다.&lt;/p&gt;

&lt;p&gt;이러한 파일들은 jekyll로 build를 할 때, 하위 디렉토리인 _site에 생기니, 이 파일을 직접 GitHub Pages의 repository에 올려서 사용해도 문제 없이 서비스 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GitHub Pages에서 지원하지 않는 jekyll의 Plugin으로 만든 파일이라도 말이죠.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;github-pages-with-an-unsupported-plugin&quot;&gt;GitHub Pages with an unsupported plugin&lt;/h1&gt;

&lt;p&gt;지원하지 않는 plugin이라도 로컬에서 build를 한 뒤에 웹 파일만 올리면, 서비스가 가능하게 됩니다.&lt;/p&gt;

&lt;p&gt;이를 위해서 우선 어떤 branch가 GitHub Pages로 설정 되어 있는지 확인 해 볼 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;repository의 settings에서 GitHub Pages라는 항목을 찾아 볼 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-10-26-how-to-make-a-github-pages-work-with-an-unsupported-plugin\settings-github-pages.png&quot; alt=&quot;GitHub Pages Settings&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;저는 master branch를 사용중이라고 확인 할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;그러므로, master branch에 jekyll로 build한 파일들을 올려두면, GitHub Pages를 서비스 할 수 있게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;소스랑 파일을 분리해서 관리&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;master branch에 build된 파일을 올리니, 소스는 분리하고 싶어졌습니다.&lt;/p&gt;

&lt;p&gt;그래서 sources라는 branch를 만들고 소스는 해당 branch에만 push를 하고 있습니다.&lt;/p&gt;

&lt;p&gt;하지만, build된 파일은 master branch에 push해야 하니, 매번 branch를 변경해서 push를 해야하는 번거로움이 생겼습니다.&lt;/p&gt;

&lt;p&gt;이를 모두 수작업으로 하려면 실수도 하기 마련이고, 번거로우니 아래와 같은 &lt;em&gt;PowerShell Script&lt;/em&gt;를 만들어서 자동화하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PowerShell Script&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chcp 65001
$env:JEKYLL_ENV = 'production'
rm -r _site/*
git clone -b master https://github.com/DuiNaru/duinaru.github.io.git _site
bundle exec jekyll build
cd _site
git add -A
git commit -am 'jekyll build'
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/2019/10/23/blog-with-development-and-experience#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0&quot;&gt;build시 문자 오류&lt;/a&gt;를 해결하기 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;chcp 65001&lt;/code&gt; 과 jekyll을 production환경으로 build하기 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = 'production'&lt;/code&gt;이 포함되어있습니다.&lt;/p&gt;

&lt;p&gt;jekyll을 production환경으로 build를 해서 올리는 이유에 대해서는 다음에 설명하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;이걸로 지원하지 않는 플러그인이라도 GitHub Pages에 서비스 할 수 있게 되었습니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Oct 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/2019/10/26/how-to-make-a-github-pages-work-with-an-unsupported-plugin</link>
        <guid isPermaLink="true">https://duinaru.github.io/2019/10/26/how-to-make-a-github-pages-work-with-an-unsupported-plugin</guid>
        
        <category>jekyll</category>
        
        <category>ruby</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>개발과 경험이 함께 하는 블로그</title>
        <description>&lt;p&gt;평소에 생각하던 이것저것을 적어볼까 하다가 블로그를 만들게 되었습니다.&lt;/p&gt;

&lt;p&gt;블로그를 운영한다면 블로그 서비스를 이용하는 편이 간단하고 편할 듯 했지만, github.io 라는 도메인이 눈에 들어오더군요.&lt;/p&gt;

&lt;p&gt;그래서 github pages로 만들게 되었습니다.&lt;/p&gt;

&lt;h1 id=&quot;준비물&quot;&gt;준비물&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;github&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;github pages를 서비스할 repository를 만들었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jekyll&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;github pages는 jekyll을 지원합니다.&lt;/p&gt;

&lt;p&gt;jekyll로 만든 소스를 repository에 올려 두는 것 만으로도 빌드-배포를 해주죠.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ruby&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jekyll로 만들려면 ruby가 필요합니다.&lt;/p&gt;

&lt;p&gt;build를 하거나, plugin을 설치해서 기능을 추가해볼 수 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;만들기&quot;&gt;만들기&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;ruby&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jekyll의 build와 여러 plugin을 설치하기 위해 설치해주었습니다.&lt;/p&gt;

&lt;p&gt;jekyll 공식 홈페이지에 사용 방법이 친절히 적혀있어서 별 어려움이 없었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;다국어 지원&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;적어도 2개국어로 운영할 생각이니, 다국어 지원을 위해 &lt;a href=&quot;https://polyglot.untra.io/&quot;&gt;polyglot plugin&lt;/a&gt;을 설치해 주었습니다.&lt;/p&gt;

&lt;p&gt;이 플러그인이 github pages에서 공식적으로 지원하는 플러그인이 아니기에, 단순히 repository에 소스를 올려두는 것으로 빌드가 되지 않습니다.&lt;/p&gt;

&lt;p&gt;하지만, 다 방법이 있죠.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;테마 선택하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 과정에서 시간이 상당히 걸렸습니다.&lt;/p&gt;

&lt;p&gt;이걸로 해볼까 저걸로 해볼까 하면서 고르다가 시간이 순식간에 지나가네요.&lt;/p&gt;

&lt;p&gt;결국에는 &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;로 하기로 했습니다.&lt;/p&gt;

&lt;p&gt;하지만, 여기서 문제가 발생하였습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;build할 때, 에러가 발생해요.&lt;/p&gt;

  &lt;p&gt;polyglot plugin이 작동하질 않아요.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h1 id=&quot;문제-해결&quot;&gt;문제 해결&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;windows환경에서 build할 때, 문자 관련 에러 해결&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ruby를 windows환경에서 쓰려다 보니 발생하는 에러 였습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-10-23-blog-with-development-and-experience\build-error.png&quot; alt=&quot;빌드 에러&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;vscode에서 cmd로 빌드 하고 있었기에, &lt;code class=&quot;highlighter-rouge&quot;&gt;chcp 65001&lt;/code&gt; 을 이용해서 UTF-8로 바꿔서 해결했습니다.&lt;/p&gt;

&lt;p&gt;다르게는 jekyll을 에러가 발생하지 않는 버전으로 바꾸는 방법도 있으나, 아래의 문제로 인해 버전을 제한 할 수 밖에 없었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimal Mistakes과 polyglot plugin을 함께 사용하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 페이지가 제대로 만들어 지지 않는 문제가 발생하였습니다.&lt;/p&gt;

&lt;p&gt;시행착오 끝에, 다음과 같이 해결이 되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;jekyll버전&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;jekyll를 3.8.6으로 사용하니, polyglot plugin과 함께 작동합니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;polyglot plugin의 _config.xml설정&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-10-23-blog-with-development-and-experience\polyglot-setting.png&quot; alt=&quot;polyglot setting&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;languages의 언어 설정 순서를 default_lang에서 설정한 언어를 먼저 오게 설정하니 polyglot plugin이 잘 작동합니다.&lt;/p&gt;

&lt;h1 id=&quot;기능-추가&quot;&gt;기능 추가&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;언어 선택&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다국어 지원을 위해 언어를 바꾸는 기능을 추가해 주었습니다.&lt;/p&gt;

&lt;p&gt;페이지 하단에 보이는 KO나 JA같은 것이죠.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;댓글&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Minimal Mistakes에서도 지원하는 &lt;a href=&quot;https://disqus.com/&quot;&gt;disqus&lt;/a&gt;를 이용해서 추가했습니다.&lt;/p&gt;

&lt;h1 id=&quot;후기&quot;&gt;후기&lt;/h1&gt;

&lt;p&gt;만들다 보니 시간이 꽤나 흘렀습니다.&lt;/p&gt;

&lt;p&gt;앞으로는 글도 쓰면서, 이것저것 업데이트 해 볼까 합니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Oct 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/2019/10/23/blog-with-development-and-experience</link>
        <guid isPermaLink="true">https://duinaru.github.io/2019/10/23/blog-with-development-and-experience</guid>
        
        <category>jekyll</category>
        
        <category>ruby</category>
        
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>