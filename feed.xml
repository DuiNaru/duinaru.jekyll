<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DuiNaru's Blog</title>
    <description>Blog with development and experience</description>
    <link>https://duinaru.github.io/</link>
    <atom:link href="https://duinaru.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 27 Oct 2019 22:14:40 +0900</pubDate>
    <lastBuildDate>Sun, 27 Oct 2019 22:14:40 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>GitHub Pages에서 지원하지 않는 플러그인 쓰기</title>
        <description>&lt;p&gt;jekyll을 공식적으로 지원하는 GitHub Pages이지만, 모든 jekyll의 플러그인까지 지원하는 것은 아닙니다.&lt;/p&gt;

&lt;p&gt;GitHub Pages는  &lt;a href=&quot;http://pages.github.com/versions/&quot;&gt;지원하는 플러그인&lt;/a&gt;이 제한 되어있습니다.&lt;/p&gt;

&lt;p&gt;이 이외의 플러그인은 GitHub Pages에서 jekyll을 build할때, 제한되어 적용되지 않습니다.&lt;/p&gt;

&lt;p&gt;그럼, GitHub Pages에서 jekyll로 웹 페이지 서비스를 만들 때는 일부 플러그인만 사용해야 하는 것 일까요?&lt;/p&gt;

&lt;p&gt;반은 맞고 반은 틀립니다.&lt;/p&gt;

&lt;p&gt;알아보기 전에, 먼저 어떻게 GitHub Pages가  jekyll를 쓰는지 살펴봅시다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Pages with jekyll source&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub Pages에서 jekyll을 쓰는 간단한 방법입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll&quot;&gt;공식 도움말&lt;/a&gt;에서도 설명하는 방법처럼 jekyll 소스를 repository에 올려두고 GitHub Pages가 jekyll을 build를 하는 방법입니다.&lt;/p&gt;

&lt;p&gt;GitHub Pages에서 문제 없이 사용가능한 플러그인으로 제한을 하니, plugin의 호환성 같은 문제들에 대해 신경 덜 쓰고 만들 수 있다는 장점이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Pages without jekyll source&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub Pages는 기본적으로 정적 웹 페이지 호스팅 서비스이므로, jekyll소스가 아닌 웹 파일만 있어도 서비스가 가능합니다.&lt;/p&gt;

&lt;p&gt;즉, 무엇으로 만들었던, 서비스에 필요한 파일만 있으면 문제 없다는 것입니다.&lt;/p&gt;

&lt;p&gt;이러한 파일들은 jekyll로 build를 할 때, 하위 디렉토리인 _site에 생기니, 이 파일을 직접 GitHub Pages의 repository에 올려서 사용해도 문제 없이 서비스 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GitHub Pages에서 지원하지 않는 jekyll의 Plugin으로 만든 파일이라도 말이죠.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;github-pages-with-an-unsupported-plugin&quot;&gt;GitHub Pages with an unsupported plugin&lt;/h1&gt;

&lt;p&gt;지원하지 않는 plugin이라도 로컬에서 build를 한 뒤에 웹 파일만 올리면, 서비스가 가능하게 됩니다.&lt;/p&gt;

&lt;p&gt;이를 위해서 우선 어떤 branch가 GitHub Pages로 설정 되어 있는지 확인 해 볼 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;repository의 settings에서 GitHub Pages라는 항목을 찾아 볼 수 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-10-26-how-to-make-a-github-pages-work-with-an-unsupported-plugin\settings-github-pages.png&quot; alt=&quot;GitHub Pages Settings&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;저는 master branch를 사용중이라고 확인 할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;그러므로, master branch에 jekyll로 build한 파일들을 올려두면, GitHub Pages를 서비스 할 수 있게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;소스랑 파일을 분리해서 관리&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;master branch에 build된 파일을 올리니, 소스는 분리하고 싶어졌습니다.&lt;/p&gt;

&lt;p&gt;그래서 sources라는 branch를 만들고 소스는 해당 branch에만 push를 하고 있습니다.&lt;/p&gt;

&lt;p&gt;하지만, build된 파일은 master branch에 push해야 하니, 매번 branch를 변경해서 push를 해야하는 번거로움이 생겼습니다.&lt;/p&gt;

&lt;p&gt;이를 모두 수작업으로 하려면 실수도 하기 마련이고, 번거로우니 아래와 같은 &lt;em&gt;PowerShell Script&lt;/em&gt;를 만들어서 자동화하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PowerShell Script&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chcp 65001
$env:JEKYLL_ENV = 'production'
rm -r _site/*
git clone -b master https://github.com/DuiNaru/duinaru.github.io.git _site
bundle exec jekyll build
cd _site
git add -A
git commit -am 'jekyll build'
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/2019/10/23/blog-with-development-and-experience#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0&quot;&gt;build시 문자 오류&lt;/a&gt;를 해결하기 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;chcp 65001&lt;/code&gt; 과 jekyll을 production환경으로 build하기 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = 'production'&lt;/code&gt;이 포함되어있습니다.&lt;/p&gt;

&lt;p&gt;jekyll을 production환경으로 build를 해서 올리는 이유에 대해서는 다음에 설명하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;이걸로 지원하지 않는 플러그인이라도 GitHub Pages에 서비스 할 수 있게 되었습니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Oct 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/2019/10/26/how-to-make-a-github-pages-work-with-an-unsupported-plugin</link>
        <guid isPermaLink="true">https://duinaru.github.io/2019/10/26/how-to-make-a-github-pages-work-with-an-unsupported-plugin</guid>
        
        
      </item>
    
      <item>
        <title>개발과 경험이 함께 하는 블로그</title>
        <description>&lt;p&gt;평소에 생각하던 이것저것을 적어볼까 하다가 블로그를 만들게 되었습니다.&lt;/p&gt;

&lt;p&gt;블로그를 운영한다면 블로그 서비스를 이용하는 편이 간단하고 편할 듯 했지만, github.io 라는 도메인이 눈에 들어오더군요.&lt;/p&gt;

&lt;p&gt;그래서 github pages로 만들게 되었습니다.&lt;/p&gt;

&lt;h1 id=&quot;준비물&quot;&gt;준비물&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;github&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;github pages를 서비스할 repository를 만들었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jekyll&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;github pages는 jekyll을 지원합니다.&lt;/p&gt;

&lt;p&gt;jekyll로 만든 소스를 repository에 올려 두는 것 만으로도 빌드-배포를 해주죠.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ruby&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jekyll로 만들려면 ruby가 필요합니다.&lt;/p&gt;

&lt;p&gt;build를 하거나, plugin을 설치해서 기능을 추가해볼 수 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;만들기&quot;&gt;만들기&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;ruby&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jekyll의 build와 여러 plugin을 설치하기 위해 설치해주었습니다.&lt;/p&gt;

&lt;p&gt;jekyll 공식 홈페이지에 사용 방법이 친절히 적혀있어서 별 어려움이 없었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;다국어 지원&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;적어도 2개국어로 운영할 생각이니, 다국어 지원을 위해 &lt;a href=&quot;https://polyglot.untra.io/&quot;&gt;polygot plugin&lt;/a&gt;을 설치해 주었습니다.&lt;/p&gt;

&lt;p&gt;이 플러그인이 github pages에서 공식적으로 지원하는 플러그인이 아니기에, 단순히 repository에 소스를 올려두는 것으로 빌드가 되지 않습니다.&lt;/p&gt;

&lt;p&gt;하지만, 다 방법이 있죠.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;테마 선택하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 과정에서 시간이 상당히 걸렸습니다.&lt;/p&gt;

&lt;p&gt;이걸로 해볼까 저걸로 해볼까 하면서 고르다가 시간이 순식간에 지나가네요.&lt;/p&gt;

&lt;p&gt;결국에는 &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;로 하기로 했습니다.&lt;/p&gt;

&lt;p&gt;하지만, 여기서 문제가 발생하였습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;build할 때, 에러가 발생해요.&lt;/p&gt;

  &lt;p&gt;polyglot plugin이 작동하질 않아요.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h1 id=&quot;문제-해결&quot;&gt;문제 해결&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;windows환경에서 build할 때, 문자 관련 에러 해결&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ruby를 windows환경에서 쓰려다 보니 발생하는 에러 였습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-10-23-blog-with-development-and-experience\build-error.png&quot; alt=&quot;빌드 에러&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;vscode에서 cmd로 빌드 하고 있었기에, &lt;code class=&quot;highlighter-rouge&quot;&gt;chcp 65001&lt;/code&gt; 을 이용해서 UTF-8로 바꿔서 해결했습니다.&lt;/p&gt;

&lt;p&gt;다르게는 jekyll을 에러가 발생하지 않는 버전으로 바꾸는 방법도 있으나, 아래의 문제로 인해 버전을 제한 할 수 밖에 없었습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimal Mistakes과 polygot plugin을 함께 사용하기&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;웹 페이지가 제대로 만들어 지지 않는 문제가 발생하였습니다.&lt;/p&gt;

&lt;p&gt;시행착오 끝에, 다음과 같이 해결이 되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;jekyll버전&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;jekyll를 3.8.6으로 사용하니, polygot plugin과 함께 작동합니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;polyglot plugin의 _config.xml설정&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-10-23-blog-with-development-and-experience\polyglot-setting.png&quot; alt=&quot;polyglot setting&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;languages의 언어 설정 순서를 default_lang에서 설정한 언어를 먼저 오게 설정하니 polygot plugin이 잘 작동합니다.&lt;/p&gt;

&lt;h1 id=&quot;기능-추가&quot;&gt;기능 추가&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;언어 선택&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;다국어 지원을 위해 언어를 바꾸는 기능을 추가해 주었습니다.&lt;/p&gt;

&lt;p&gt;페이지 하단에 보이는 KO나 JA같은 것이죠.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;댓글&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Minimal Mistakes에서도 지원하는 &lt;a href=&quot;https://disqus.com/&quot;&gt;disqus&lt;/a&gt;를 이용해서 추가했습니다.&lt;/p&gt;

&lt;h1 id=&quot;후기&quot;&gt;후기&lt;/h1&gt;

&lt;p&gt;만들다 보니 시간이 꽤나 흘렀습니다.&lt;/p&gt;

&lt;p&gt;앞으로는 글도 쓰면서, 이것저것 업데이트 해 볼까 합니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Oct 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/2019/10/23/blog-with-development-and-experience</link>
        <guid isPermaLink="true">https://duinaru.github.io/2019/10/23/blog-with-development-and-experience</guid>
        
        
      </item>
    
  </channel>
</rss>