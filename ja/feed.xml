<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DuiNaru's Blog</title>
    <description>Blog with development and experience</description>
    <link>https://duinaru.github.io/</link>
    <atom:link href="https://duinaru.github.io/ja/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 31 Oct 2019 21:45:42 +0900</pubDate>
    <lastBuildDate>Thu, 31 Oct 2019 21:45:42 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>GitHub PagesでサポートされないPluginを使う方法</title>
        <description>&lt;p&gt;jekyllを公式的にサポートするGitHub Pagesですが、全てのjekyllのpluginまでサポートすることではありません。&lt;/p&gt;

&lt;p&gt;GitHub Pagesは&lt;a href=&quot;http://pages.github.com/versions/&quot;&gt;サポートするplugin&lt;/a&gt;が制限されています。&lt;/p&gt;

&lt;p&gt;これ以外のpluginはGitHub Pagesでjekyllをbuildする時、制限されて適用されません。&lt;/p&gt;

&lt;p&gt;では、GitHub Pagesでjekyllを使って、ウェブページサービスを作る時は一部のpluginだけ使用しなければならないでしょうか。&lt;/p&gt;

&lt;p&gt;半分は正しく、半分は違います。&lt;/p&gt;

&lt;p&gt;なぜか調べるまえにGitHub Pagesがどのようにjekyllを使うか調べましょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Pages with jekyll source&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Github Pagesでjekyllを使う簡単な方法です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll&quot;&gt;公式ヘルプ&lt;/a&gt;でも説明する方法のように、jekyllのソースをrepositoryに上げておいてGitHub Pagesがjekyllをbuildする方法です。&lt;/p&gt;

&lt;p&gt;GitHub Pagesで問題なく使用可能なpluginで制限され、pluginの互換性などの問題についてあまり気を使わなく作ることができるいいところがあります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Pages without jekyll source&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub Pagesは基本的に静的ウェブページホスティングサービスですので、jekyllのソースではなくウェブファイルだけあってもサービスが可能です。&lt;/p&gt;

&lt;p&gt;つまり、何で作ったとしても、サービスに必要なファイルだけあれば問題ないということです。&lt;/p&gt;

&lt;p&gt;このようなファイルはjekyllでbuildした時に_siteのディレクトリの中に出来上がるので、このファイルを直接GitHub Pagesのrepositoryに上げても問題なくサービスできます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GitHub PagesでサポートしないjekyllのPluginで作ったファイルも例外ではありません。&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;github-pages-with-an-unsupported-plugin&quot;&gt;GitHub Pages with an unsupported plugin&lt;/h1&gt;

&lt;p&gt;サポートされないpluginでもローカルでbuildした後、ファイルを上げればサービスが可能になります。&lt;/p&gt;

&lt;p&gt;このためには先ずはどのbranchがGitHub Pagesに設定されているか確認する必要があります。&lt;/p&gt;

&lt;p&gt;repositoryのsettingsにGitHub Pagesという項目があります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-10-26-how-to-make-a-github-pages-work-with-an-unsupported-plugin\settings-github-pages.png&quot; alt=&quot;GitHub Pages Settings&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;筆者の場合はmaster branchを使用中ということを確認できました。&lt;/p&gt;

&lt;p&gt;ですので、master branchにjekyllでbuildしたファイルを上げておけば、GitHub Pagesをサービスすることができるようになります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ソースとファイルを分けて、管理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;master branchにbuildしたファイルを上げたら、ソースは分けて上げたくなりました。&lt;/p&gt;

&lt;p&gt;それでsourcesというbranchを作り、ソースは該当のbranchにpushするとことにしました。&lt;/p&gt;

&lt;p&gt;しかし、buildされたファイルはmaster branchにpushしなければならないので、都度branchを変更してpushする面倒なことになりました。&lt;/p&gt;

&lt;p&gt;これを全て手作業でしたら、ミスも出るし、面倒なので、下のような&lt;em&gt;PowerShell Script&lt;/em&gt;を作って自動化しました。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PowerShell Script&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chcp 65001
$env:JEKYLL_ENV = 'production'
rm -r _site/*
git clone -b master https://github.com/DuiNaru/duinaru.github.io.git _site
bundle exec jekyll build
cd _site
git add -A
git commit -am 'jekyll build'
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/2019/10/23/blog-with-development-and-experience#%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA&quot;&gt;build時、エラー&lt;/a&gt;を解決するための&lt;code class=&quot;highlighter-rouge&quot;&gt;chcp 65001&lt;/code&gt;とjekyllをproduction環境でbuildするための&lt;code class=&quot;highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = 'production'&lt;/code&gt;が含まれています。&lt;/p&gt;

&lt;p&gt;jekyllをproduction環境でbuildをして上げる理由については次に説明します。&lt;/p&gt;

&lt;p&gt;これで、GitHub Pagesがサポートしないpluginでもサービスが可能になりました。&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Oct 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/ja/2019/10/26/how-to-make-a-github-pages-work-with-an-unsupported-plugin</link>
        <guid isPermaLink="true">https://duinaru.github.io/ja/2019/10/26/how-to-make-a-github-pages-work-with-an-unsupported-plugin</guid>
        
        
      </item>
    
      <item>
        <title>開発と経験があるブログ</title>
        <description>&lt;p&gt;普段考えていた色々なものを書こうとブログを作ることにしました。&lt;/p&gt;

&lt;p&gt;ブログを運営するならブログサービスを利用した方が簡単で便利だろうと思っていた時にgithub.ioというドメインを見つけました。&lt;/p&gt;

&lt;p&gt;結果としては、github pagesで実装しました。&lt;/p&gt;

&lt;h1 id=&quot;必要な物&quot;&gt;必要な物&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;github&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;github pagesをサービスするrepositoryを作りました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jekyll&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;github pagesはjekyllをサポートします。&lt;/p&gt;

&lt;p&gt;jekyllで作ったソースをrepositoryに置いておくだけでビルド-デプロイをしてくれます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ruby&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jekyllで作るにはrubyが必要です。&lt;/p&gt;

&lt;p&gt;buildをしたり、pluginをインストールして機能を追加することができます。&lt;/p&gt;

&lt;h1 id=&quot;作る&quot;&gt;作る&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;ruby&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jekyllのbuildと様々なpluginを利用するためにインストールしました。&lt;/p&gt;

&lt;p&gt;jekyllの公式ホームページに手順があり、便利でした。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;マルチランゲージ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;少なくとも2ヶ国語で運営することを目指してしていまして、マルチランゲージのサポートのため&lt;a href=&quot;https://polyglot.untra.io/&quot;&gt;polygot plugin&lt;/a&gt;を使用しました。&lt;/p&gt;

&lt;p&gt;このプラグインはgithub pagesで公式的にサポートするプラグインではありませんので、単純にrepositoryにソースを置いておくことだけでビルドはできません。&lt;/p&gt;

&lt;p&gt;でも、対策はあるでしょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;テーマ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;テーマを選ぶことに時間がかなりかかりました。&lt;/p&gt;

&lt;p&gt;これにしようかあれにしようかとしたら時間があっという間に過ぎました。&lt;/p&gt;

&lt;p&gt;結局は&lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;にすることにしました。&lt;/p&gt;

&lt;p&gt;しかし、ここで問題が発生しました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;buildの時、エラーが出ます。&lt;/p&gt;

  &lt;p&gt;polyglot pluginが動かないです。&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h1 id=&quot;問題解決&quot;&gt;問題解決&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;windows環境でbuildの時、文字関連エラーの解決&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;rubyをwindowsの環境で使おうとしたら出るエラーでした。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-10-23-blog-with-development-and-experience\build-error.png&quot; alt=&quot;ビルドエラー&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;vscodeからcmdでビルドしていたので、&lt;code class=&quot;highlighter-rouge&quot;&gt;chcp 65001&lt;/code&gt; でUTF-8に変えて解決しました。&lt;/p&gt;

&lt;p&gt;他には、jekyllをエラーが出ないバージョンに変更する方法もありますが、下記の問題でバージョンを制限するしかありませんでした。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimal Mistakesとpolygot pluginを共に使用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ウェブページを正常に作れない問題が出ました。&lt;/p&gt;

&lt;p&gt;これについては色々トライし、次のように解決できました。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;jekyllバージョン制限&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;jekyllのバージョンを3.8.6としたら、polygot pluginと共に動きました。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;polyglot pluginの_config.xml設定&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-10-23-blog-with-development-and-experience\polyglot-setting.png&quot; alt=&quot;polyglot setting&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;languagesの言語の一番目をdefault_langに設定したらpolygot pluginがうまく動きました。&lt;/p&gt;

&lt;h1 id=&quot;機能追加&quot;&gt;機能追加&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;言語セレクタ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;マルチランゲージのサポートのため、言語を変更する機能を追加しました。&lt;/p&gt;

&lt;p&gt;ページの下にあるJAやKOなどのものです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;コメント&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Minimal Mistakesで提供する&lt;a href=&quot;https://disqus.com/&quot;&gt;disqus&lt;/a&gt;を利用し、実装しました。&lt;/p&gt;

&lt;h1 id=&quot;感想&quot;&gt;感想&lt;/h1&gt;

&lt;p&gt;多様な機能を実現してかなり時間が過ぎました。&lt;/p&gt;

&lt;p&gt;これからはポストも作成しつつ、また新しい機能を追加していきたいと思います。&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Oct 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/ja/2019/10/23/blog-with-development-and-experience</link>
        <guid isPermaLink="true">https://duinaru.github.io/ja/2019/10/23/blog-with-development-and-experience</guid>
        
        
      </item>
    
  </channel>
</rss>