<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DuiNaru's Blog</title>
    <description>Blog with development and experience</description>
    <link>https://duinaru.github.io/</link>
    <atom:link href="https://duinaru.github.io/ja/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 18 Nov 2019 23:21:59 +0900</pubDate>
    <lastBuildDate>Mon, 18 Nov 2019 23:21:59 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>SSMとCloudWatchでログインする時、EC2が自動起動されるように設定</title>
        <description>&lt;p&gt;Cloud9を手動で作ったEC2で使用していまして、自動で作る時に使用できるEC2の自動起動のようにしたいと思いました。&lt;/p&gt;

&lt;p&gt;しかし、Cloud9が始まる時にEC2をスタートさせることはできなくてConsoleにSign inする時、起動されるようにしました。&lt;/p&gt;

&lt;h2 id=&quot;aws-system-manager&quot;&gt;AWS System Manager&lt;/h2&gt;

&lt;p&gt;EC2を起動させるためにSSMを利用します。&lt;/p&gt;

&lt;p&gt;そのため、SSMがEC2を管理できるようにセットアップをしなければなりません。&lt;/p&gt;

&lt;h3 id=&quot;iam-role-作成--amazonssmmanagedinstancecore&quot;&gt;IAM Role 作成 : AmazonSSMManagedInstanceCore&lt;/h3&gt;

&lt;p&gt;EC2をSSMで使用できるようにIAM Roleを作成します。&lt;/p&gt;

&lt;p&gt;AmazonSSMManagedInstanceCoreのpolicyを選択し、作ります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-18-auto-start-ec2-on-sign-in\AmazonSSMManagedInstanceCore.png&quot; alt=&quot;AmazonSSMManagedInstanceCore&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作ったIAMを自動起動させようとするEC2にattachすればいいです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html?icmpid=docs_ec2_console#attach-iam-role&quot;&gt;Attaching an IAM Role to an Instance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上のリンクのようにすればいいです。&lt;/p&gt;

&lt;h3 id=&quot;iam-role-作成--amazonssmautomationrole&quot;&gt;IAM Role 作成 : AmazonSSMAutomationRole&lt;/h3&gt;

&lt;p&gt;今度はSSMを実行する時に必要なIAM Roleを作成します。&lt;/p&gt;

&lt;p&gt;AmazonSSMAutomationRoleのpolicyを選択し、作ります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-18-auto-start-ec2-on-sign-in\AmazonSSMAutomationRole.png&quot; alt=&quot;AmazonSSMAutomationRole&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;このroleは後で使います。&lt;/p&gt;

&lt;p&gt;次はログインイベントが発生するとEC2が起動されるように設定します。&lt;/p&gt;

&lt;h2 id=&quot;cloudtrail-設定&quot;&gt;CloudTrail 設定&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-event-reference-aws-console-sign-in-events.html&quot;&gt;ログインイベント&lt;/a&gt;を使用するためにはCloudTrailを設定する必要があります。&lt;/p&gt;

&lt;p&gt;CloudTrailの左メニューで Trails - Create Trail を選択しましょう。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-18-auto-start-ec2-on-sign-in\create-trail.png&quot; alt=&quot;create trail&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作成し、設定を見るとLoggingがONになっていることが確認できます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-18-auto-start-ec2-on-sign-in\logging-on.png&quot; alt=&quot;Logging ON&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CloudTrailの設定が終わりました。&lt;/p&gt;

&lt;h2 id=&quot;cloudwatchのrules設定&quot;&gt;CloudWatchのRules設定&lt;/h2&gt;

&lt;p&gt;ログインイベントをCloudWatchで感知し、処理されるようにしましょう。&lt;/p&gt;

&lt;p&gt;CloudWatchの左メニューで Rules - Creates rule を選択します。&lt;/p&gt;

&lt;h3 id=&quot;event-source&quot;&gt;Event Source&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-18-auto-start-ec2-on-sign-in\create-rule.png&quot; alt=&quot;create rule&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Service NameはAWS Console Sign-inを選択します。&lt;/p&gt;

&lt;p&gt;どんなユーザーもログインする時、イベントに対して処理させたいと思ったらAny userを選択し、&lt;/p&gt;

&lt;p&gt;特定のユーザーがログインする時、イベントに対して処理させたいと思ったらSpecific users(s) by ARNを選択し、ユーザーのarnを入力します。&lt;/p&gt;

&lt;h3 id=&quot;targets&quot;&gt;Targets&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-18-auto-start-ec2-on-sign-in\target.png&quot; alt=&quot;target setting&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ログインイベントの記録とEC2が起動されるように設定します。&lt;/p&gt;

&lt;p&gt;CloudWatch log GroupはLog Groupを入力し、&lt;/p&gt;

&lt;p&gt;SSM AutomationはDocumentをAWS-StartEC2Instanceに選択し、InstanceIdに起動させたいEC2のInstanceIDを入力します。&lt;/p&gt;

&lt;p&gt;下はUse existing roleを選択し、&lt;a href=&quot;#iam-role-作成--amazonssmautomationrole&quot;&gt;IAM Role 作成 : AmazonSSMAutomationRole&lt;/a&gt;で作成したRoleを指定します。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-18-auto-start-ec2-on-sign-in\create-rule-2.png&quot; alt=&quot;create rule step2&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;nameを入力し、Enabledがチェックされた状態で作ります。&lt;/p&gt;

&lt;h2 id=&quot;確認&quot;&gt;確認&lt;/h2&gt;

&lt;p&gt;EC2が自動的に起動されるか確認してみましょう。&lt;/p&gt;

&lt;p&gt;そのためなら、再ログインしなければならないですね。&lt;/p&gt;

&lt;p&gt;1~2分ぐらいの時間が過ぎたら、&lt;a href=&quot;#targets&quot;&gt;Targets&lt;/a&gt;で作成したCloudWatchのLog Groupにログインイベントが記録され、EC2が起動されていました。&lt;/p&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;

&lt;p&gt;CloudTrailを設定しなくて、ログインイベントが繋がらないとか、&lt;/p&gt;

&lt;p&gt;SSM Automationのroleをちゃんと設定しなくてruleが実行できないとか等、&lt;/p&gt;

&lt;p&gt;試行錯誤を繰り返して成功するようになりました。&lt;/p&gt;

&lt;p&gt;Cloud9で作る時に使用可能なEC2の自動起動と似ているように使用することができそうです。&lt;/p&gt;

&lt;p&gt;次は、一定の時間で接続がないと終了されるようにするつもりです。&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Nov 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/ja/2019/11/18/auto-start-ec2-on-sign-in</link>
        <guid isPermaLink="true">https://duinaru.github.io/ja/2019/11/18/auto-start-ec2-on-sign-in</guid>
        
        <category>aws</category>
        
        <category>ec2</category>
        
        <category>ssm</category>
        
        <category>cloudtrail</category>
        
        <category>cloudwatch</category>
        
        <category>cloud9</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>Rails画面確認とCloud9設定</title>
        <description>&lt;p&gt;サンプル画面を確認し、本格的な開発にあたってIDEをCloud9で使用する設定をしました。&lt;/p&gt;

&lt;h2 id=&quot;blog-生成&quot;&gt;blog 生成&lt;/h2&gt;

&lt;p&gt;blogという名前のrailsアプリケーションを作りました。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails new blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;該当のコマンドで予め用意されているblogアプリケーションがダウンロードされます。&lt;/p&gt;

&lt;h2 id=&quot;エラー発生&quot;&gt;エラー発生&lt;/h2&gt;

&lt;p&gt;ダウンロードは完了しましたが、エラーが出ました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Gem::Ext::BuildError: ERROR: Failed to build gem native extension.
current directory: /tmp/bundler20191116-12860-iie6sqlite3-1.4.1/gems/sqlite3-1.4.1/ext/sqlite3
/usr/bin/ruby2.5 -r ./siteconf20191116-12860-3nvvhf.rb extconf.rb
checking for sqlite3.h... no
sqlite3.h is missing. Try 'brew install sqlite3',
'yum install sqlite-devel' or 'apt-get install libsqlite3-dev'
and check your shared library search path (the
location where your sqlite3 shared library is located).
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sqlite3 1.4.1がちゃんとインストール出来ていないようです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install sqlite3 -v '1.4.1'&lt;/code&gt;でも同じでしたので、次のコマンドで解決できました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install libsqlite3-dev
sudo gem update
bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;railsを実行してみましょう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;またエラー&quot;&gt;また、エラー&lt;/h2&gt;

&lt;p&gt;エラーが出ました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/var/lib/gems/2.5.0/gems/webpacker-4.2.0/lib/webpacker/configuration.rb:95:in `rescue in load': Webpacker configuration file not found /home/ubuntu/blog/config/webpacker.yml.
Please run rails webpacker:install Error: No such file or directory @ rb_sysopen - /home/ubuntu/blog/config/webpacker.yml (RuntimeError)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;webpackerのインストールが必要そうですね。&lt;/p&gt;

&lt;p&gt;先ずはnode.jsとyarnをインストールし、webpackerをインストールしました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -
sudo apt-get install -y nodejs
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install yarn
rails webpacker:install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;インストール完了後、railsサーバを立ち上げることができました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-16-develop-using-cloud9\rails-server.png&quot; alt=&quot;rails server&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;接続してみましょう&quot;&gt;接続してみましょう。&lt;/h2&gt;

&lt;p&gt;ローカル環境でしたら、&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:3000&lt;/code&gt;で接続できますが、今はec2で、設定を変えました。&lt;/p&gt;

&lt;h3 id=&quot;80ポートを使用可能にsecurity-groupの設定を変更&quot;&gt;80ポートを使用可能にSecurity Groupの設定を変更&lt;/h3&gt;

&lt;p&gt;EC2のSecurity GroupのInboundに80ポートを追加しました。&lt;/p&gt;

&lt;h3 id=&quot;000080でサーバ起動&quot;&gt;0.0.0.0:80でサーバ起動&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails server -b 0.0.0.0 -p 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;接続&quot;&gt;接続&lt;/h3&gt;

&lt;p&gt;EC2のパブリックipに接続してみました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;サーバ起動中&lt;/em&gt;
&lt;img src=&quot;\assets\images\2019-11-16-develop-using-cloud9\rails-server-80.png&quot; alt=&quot;rails server -b 0.0.0.0 -p 80&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;メイン画面&lt;/em&gt;
&lt;img src=&quot;\assets\images\2019-11-16-develop-using-cloud9\success.png&quot; alt=&quot;main page&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;やっとメイン画面が出ました。これからは本格的な開発になりそうですね。&lt;/p&gt;

&lt;h2 id=&quot;cloud9設定&quot;&gt;Cloud9設定&lt;/h2&gt;

&lt;p&gt;その前に、IDEを使用するために設定しました。&lt;/p&gt;

&lt;p&gt;SSHでアクセスすればどんなIDEも使用可能ですが、AWSのEC2で環境を構築しまして、IDEもAWSの物を使ってみます。&lt;/p&gt;

&lt;p&gt;Cloud9は最初からすぐにEC2で環境構築が可能ですが、今回は作ったEC2を使用します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/cloud9/latest/user-guide/create-environment-ssh.html&quot;&gt;Creating an SSH Environment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接続するipが変わらないようにelastic ipを割り当て、上のリンクにある&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/authorized_keys&lt;/code&gt;を作成しました。&lt;/p&gt;

&lt;p&gt;後は、AWS Cloud9 Installerが実行されました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-16-develop-using-cloud9\AWS-Cloud9-Installer.png&quot; alt=&quot;AWS Cloud9 Installer&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;インストールが終わった後、Cloud9の画面の下のbashに&lt;code class=&quot;highlighter-rouge&quot;&gt;rails server -b 0.0.0.0 -p 80&lt;/code&gt;を実行し、サーバが立ち上がってメイン画面も確認できました。&lt;/p&gt;

&lt;p&gt;これからは本格的な開発になりそうです。&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Nov 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/ja/2019/11/16/develop-using-cloud9</link>
        <guid isPermaLink="true">https://duinaru.github.io/ja/2019/11/16/develop-using-cloud9</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>aws</category>
        
        <category>cloud9</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>ruby on railsをec2に実装してみました。</title>
        <description>&lt;p&gt;rubyを知りましたので、rubyでウェブサイトを開発したくてruby on railsを始めました。&lt;/p&gt;

&lt;p&gt;開発しながらruby on railsを学習する目的で、環境構築から始めました。&lt;/p&gt;

&lt;h2 id=&quot;ec2-生成&quot;&gt;EC2 生成&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;AMI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ubuntu(Ubuntu Server 18.04 LTS (HVM), SSD Volume Type)を選びました。&lt;/p&gt;

&lt;p&gt;他の設定はfree-tierができるようにしました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security groups&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SSHができるように22ポートは可能にし、他はその時に解放します。&lt;/p&gt;

&lt;h2 id=&quot;インストール&quot;&gt;インストール&lt;/h2&gt;

&lt;p&gt;SSHで接続し、インストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt; の &lt;a href=&quot;https://guides.rubyonrails.org/getting_started.html&quot;&gt;Getting Started with Rails&lt;/a&gt; を元に進めました。&lt;/p&gt;

&lt;h3 id=&quot;パッケージアップデート&quot;&gt;パッケージアップデート&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ruby-インストール&quot;&gt;Ruby インストール&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install ruby-full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ruby-バージョン確認&quot;&gt;Ruby バージョン確認&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;railsで要求されるruby 2.5.0の以降のバージョンか確認します。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-14-set-up-ruby-on-rails-ec2\ruby-v.png&quot; alt=&quot;ruby -v&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;2.5.xですね。&lt;/p&gt;

&lt;h3 id=&quot;sqlite3-インストール&quot;&gt;sqlite3 インストール&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install sqlite3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;sqlite3-バージョン確認&quot;&gt;sqlite3 バージョン確認&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlite3 --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rails-インストール&quot;&gt;rails インストール&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install rails
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;インストールのエラー&quot;&gt;インストールのエラー&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-14-set-up-ruby-on-rails-ec2\error_nokogiri.png&quot; alt=&quot;Error on installing rails about nokogiri&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Could not create Makefile due to some reason, probably lack of necessary libraries and/or headers.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;インストールの途中でエラーが発生しました。Nokogiriで一部のライブラリがなくて出るエラーのようですね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nokogiri.org/&quot;&gt;Nokogiri Homepage&lt;/a&gt;で解決策を探してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nokogiri.org/tutorials/installing_nokogiri.html#install-with-system-libraries&quot;&gt;install-with-system-libraries&lt;/a&gt;のようにしたらできました。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install pkg-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;rails のインストールを続きます。&lt;/p&gt;

&lt;h3 id=&quot;rails-バージョン確認&quot;&gt;rails バージョン確認&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-11-14-set-up-ruby-on-rails-ec2\rails--version.png&quot; alt=&quot;rails --version&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;やっとインストール完了です。&lt;/p&gt;

&lt;p&gt;次は&lt;a href=&quot;https://guides.rubyonrails.org/getting_started.html#creating-the-blog-application&quot;&gt;Creating the Blog Application&lt;/a&gt;でメイン画面まで進んでみます。&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Nov 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/ja/2019/11/14/set-up-ruby-on-rails-ec2</link>
        <guid isPermaLink="true">https://duinaru.github.io/ja/2019/11/14/set-up-ruby-on-rails-ec2</guid>
        
        <category>ruby</category>
        
        <category>rails</category>
        
        <category>aws</category>
        
        <category>ec2</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>ブログにコメント機能を追加しました</title>
        <description>&lt;p&gt;使用しているMinimal Mistakes テーマは多様なコメントサービスを使えるように&lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/configuration/#comments&quot;&gt;設定&lt;/a&gt;できて、使いました。&lt;/p&gt;

&lt;p&gt;コメントを追加するページに&lt;code class=&quot;highlighter-rouge&quot;&gt;comment: true&lt;/code&gt;を追加し、&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.xml&lt;/code&gt;には使用するサービスの情報を入力すればできます。&lt;/p&gt;

&lt;p&gt;筆者はdisqusというコメントサービスを使ってみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://disqus.com/&quot;&gt;disqus&lt;/a&gt;に会員登録してサイトを&lt;a href=&quot;http://disqus.com/admin/create&quot;&gt;生成&lt;/a&gt;し、&lt;a href=&quot;https://help.disqus.com/en/articles/1717111-what-s-a-shortname&quot;&gt;ShortName&lt;/a&gt;を分かればできます。&lt;/p&gt;

&lt;p&gt;shortnameはサイトを生成する時や、生成した後に設定ページでも分かります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://disqus.com/admin/create&quot;&gt;site生成&lt;/a&gt;
 &lt;img src=&quot;\assets\images\2019-11-03-experience-using-comments-with-minimal-mistakes\create-site.png&quot; alt=&quot;shortname&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://disqus.com/admin/settings/general/&quot;&gt;site設定&lt;/a&gt;
 &lt;img src=&quot;/assets\images\2019-11-03-experience-using-comments-with-minimal-mistakes\shortname.png&quot; alt=&quot;shortname&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;後は&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.xml&lt;/code&gt;に&lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/configuration/#disqus&quot;&gt;設定&lt;/a&gt;すればできます。&lt;/p&gt;

&lt;p&gt;会員登録と使用設定すれば終わるので、簡単ですね。&lt;/p&gt;

&lt;p&gt;確認してみましょう。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;出ない。&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;理由を探してみましょう。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;おかしいです。どう見ても今までの設定でできそうです。&lt;/p&gt;

&lt;p&gt;それで、Minimal Mistakesでdisqusと関係したcommentのソースコードを探してみました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;_includes\comments.html
&lt;img src=&quot;/assets\images\2019-11-03-experience-using-comments-with-minimal-mistakes\comments.png&quot; alt=&quot;comments.html&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;disqusのためにsectionを作っていることが確認できます。&lt;/p&gt;

&lt;p&gt;それで、該当のhtmlをincludeしているファイルを探してみました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;_layouts\single.html
&lt;img src=&quot;\assets\images\2019-11-03-experience-using-comments-with-minimal-mistakes\single.png&quot; alt=&quot;single&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;singleのレイアウトページの一部です。&lt;/p&gt;

&lt;p&gt;何かの条件でincludeをしていることが確認できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;site.comments.provider&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.xml&lt;/code&gt;で設定し、&lt;code class=&quot;highlighter-rouge&quot;&gt;page.comments&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;に設定しておきました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;jekyll.environment == ‘production’は？&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;あ、Minimal Mistakes  &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/configuration/#comments&quot;&gt;comment設定&lt;/a&gt;のNoteがこの内容のようですね！&lt;/p&gt;

&lt;h1 id=&quot;jekyllをproduction環境でbuildする&quot;&gt;jekyllをproduction環境でbuildする&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/configuration/options/#build-command-options&quot;&gt;jekyll build オプション&lt;/a&gt;で&lt;a href=&quot;https://jekyllrb.com/docs/configuration/environments/&quot;&gt;Environment&lt;/a&gt;を設定できます。&lt;/p&gt;

&lt;p&gt;コードからは&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll.environment&lt;/code&gt;で読み取れ、buildの設定に分けて異なる結果物を作ることができるようになります。&lt;/p&gt;

&lt;p&gt;Minimal Mistakesはproductionでbuildした場合のみ、commentを使用できるようにしてありますので、buildの時にEnvironmentをproductionに設定しなければなりません。&lt;/p&gt;

&lt;p&gt;GitHub Pagesでbuildする場合なら、自動的にproductionに設定されてbuildされますが、筆者はlocalでbuildをしているので設定する必要がありました。&lt;/p&gt;

&lt;p&gt;linuxの環境でしたら、&lt;a href=&quot;https://jekyllrb.com/docs/configuration/environments/&quot;&gt;Environment&lt;/a&gt;で説明しているようにすればいいですが、windowsなら別です。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;cmdの場合&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set JEKYLL_ENV=production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;powershellの場合&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$env:JEKYLL_ENV = 'production'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上記のコマンドを実行した後にbuildやserveをしたら、productionで作られます。&lt;/p&gt;

&lt;p&gt;これで、Minimal Mistakesにコメント機能を追加することができました。&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Nov 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/ja/2019/11/03/experience-using-comments-with-minimal-mistakes</link>
        <guid isPermaLink="true">https://duinaru.github.io/ja/2019/11/03/experience-using-comments-with-minimal-mistakes</guid>
        
        <category>jekyll</category>
        
        <category>ruby</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>GitHub PagesでサポートされないPluginを使う方法</title>
        <description>&lt;p&gt;jekyllを公式的にサポートするGitHub Pagesですが、全てのjekyllのpluginまでサポートすることではありません。&lt;/p&gt;

&lt;p&gt;GitHub Pagesは&lt;a href=&quot;http://pages.github.com/versions/&quot;&gt;サポートするplugin&lt;/a&gt;が制限されています。&lt;/p&gt;

&lt;p&gt;これ以外のpluginはGitHub Pagesでjekyllをbuildする時、制限されて適用されません。&lt;/p&gt;

&lt;p&gt;では、GitHub Pagesでjekyllを使って、ウェブページサービスを作る時は一部のpluginだけ使用しなければならないでしょうか。&lt;/p&gt;

&lt;p&gt;半分は正しく、半分は違います。&lt;/p&gt;

&lt;p&gt;なぜか調べるまえにGitHub Pagesがどのようにjekyllを使うか調べましょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Pages with jekyll source&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Github Pagesでjekyllを使う簡単な方法です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll&quot;&gt;公式ヘルプ&lt;/a&gt;でも説明する方法のように、jekyllのソースをrepositoryに上げておいてGitHub Pagesがjekyllをbuildする方法です。&lt;/p&gt;

&lt;p&gt;GitHub Pagesで問題なく使用可能なpluginで制限され、pluginの互換性などの問題についてあまり気を使わなく作ることができるいいところがあります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Pages without jekyll source&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitHub Pagesは基本的に静的ウェブページホスティングサービスですので、jekyllのソースではなくウェブファイルだけあってもサービスが可能です。&lt;/p&gt;

&lt;p&gt;つまり、何で作ったとしても、サービスに必要なファイルだけあれば問題ないということです。&lt;/p&gt;

&lt;p&gt;このようなファイルはjekyllでbuildした時に_siteのディレクトリの中に出来上がるので、このファイルを直接GitHub Pagesのrepositoryに上げても問題なくサービスできます。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GitHub PagesでサポートしないjekyllのPluginで作ったファイルも例外ではありません。&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;github-pages-with-an-unsupported-plugin&quot;&gt;GitHub Pages with an unsupported plugin&lt;/h1&gt;

&lt;p&gt;サポートされないpluginでもローカルでbuildした後、ファイルを上げればサービスが可能になります。&lt;/p&gt;

&lt;p&gt;このためには先ずはどのbranchがGitHub Pagesに設定されているか確認する必要があります。&lt;/p&gt;

&lt;p&gt;repositoryのsettingsにGitHub Pagesという項目があります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-10-26-how-to-make-a-github-pages-work-with-an-unsupported-plugin\settings-github-pages.png&quot; alt=&quot;GitHub Pages Settings&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;筆者の場合はmaster branchを使用中ということを確認できました。&lt;/p&gt;

&lt;p&gt;ですので、master branchにjekyllでbuildしたファイルを上げておけば、GitHub Pagesをサービスすることができるようになります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ソースとファイルを分けて、管理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;master branchにbuildしたファイルを上げたら、ソースは分けて上げたくなりました。&lt;/p&gt;

&lt;p&gt;それでsourcesというbranchを作り、ソースは該当のbranchにpushするとことにしました。&lt;/p&gt;

&lt;p&gt;しかし、buildされたファイルはmaster branchにpushしなければならないので、都度branchを変更してpushする面倒なことになりました。&lt;/p&gt;

&lt;p&gt;これを全て手作業でしたら、ミスも出るし、面倒なので、下のような&lt;em&gt;PowerShell Script&lt;/em&gt;を作って自動化しました。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PowerShell Script&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chcp 65001
$env:JEKYLL_ENV = 'production'
rm -r _site/*
git clone -b master https://github.com/DuiNaru/duinaru.github.io.git _site
bundle exec jekyll build
cd _site
git add -A
git commit -am 'jekyll build'
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/2019/10/23/blog-with-development-and-experience#%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA&quot;&gt;build時、エラー&lt;/a&gt;を解決するための&lt;code class=&quot;highlighter-rouge&quot;&gt;chcp 65001&lt;/code&gt;とjekyllをproduction環境でbuildするための&lt;code class=&quot;highlighter-rouge&quot;&gt;$env:JEKYLL_ENV = 'production'&lt;/code&gt;が含まれています。&lt;/p&gt;

&lt;p&gt;jekyllをproduction環境でbuildをして上げる理由については次に説明します。&lt;/p&gt;

&lt;p&gt;これで、GitHub Pagesがサポートしないpluginでもサービスが可能になりました。&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Oct 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/ja/2019/10/26/how-to-make-a-github-pages-work-with-an-unsupported-plugin</link>
        <guid isPermaLink="true">https://duinaru.github.io/ja/2019/10/26/how-to-make-a-github-pages-work-with-an-unsupported-plugin</guid>
        
        <category>jekyll</category>
        
        <category>ruby</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>開発と経験があるブログ</title>
        <description>&lt;p&gt;普段考えていた色々なものを書こうとブログを作ることにしました。&lt;/p&gt;

&lt;p&gt;ブログを運営するならブログサービスを利用した方が簡単で便利だろうと思っていた時にgithub.ioというドメインを見つけました。&lt;/p&gt;

&lt;p&gt;結果としては、github pagesで実装しました。&lt;/p&gt;

&lt;h1 id=&quot;必要な物&quot;&gt;必要な物&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;github&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;github pagesをサービスするrepositoryを作りました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jekyll&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;github pagesはjekyllをサポートします。&lt;/p&gt;

&lt;p&gt;jekyllで作ったソースをrepositoryに置いておくだけでビルド-デプロイをしてくれます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ruby&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jekyllで作るにはrubyが必要です。&lt;/p&gt;

&lt;p&gt;buildをしたり、pluginをインストールして機能を追加することができます。&lt;/p&gt;

&lt;h1 id=&quot;作る&quot;&gt;作る&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;ruby&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jekyllのbuildと様々なpluginを利用するためにインストールしました。&lt;/p&gt;

&lt;p&gt;jekyllの公式ホームページに手順があり、便利でした。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;マルチランゲージ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;少なくとも2ヶ国語で運営することを目指してしていまして、マルチランゲージのサポートのため&lt;a href=&quot;https://polyglot.untra.io/&quot;&gt;polyglot plugin&lt;/a&gt;を使用しました。&lt;/p&gt;

&lt;p&gt;このプラグインはgithub pagesで公式的にサポートするプラグインではありませんので、単純にrepositoryにソースを置いておくことだけでビルドはできません。&lt;/p&gt;

&lt;p&gt;でも、対策はあるでしょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;テーマ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;テーマを選ぶことに時間がかなりかかりました。&lt;/p&gt;

&lt;p&gt;これにしようかあれにしようかとしたら時間があっという間に過ぎました。&lt;/p&gt;

&lt;p&gt;結局は&lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;にすることにしました。&lt;/p&gt;

&lt;p&gt;しかし、ここで問題が発生しました。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;buildの時、エラーが出ます。&lt;/p&gt;

  &lt;p&gt;polyglot pluginが動かないです。&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h1 id=&quot;問題解決&quot;&gt;問題解決&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;windows環境でbuildの時、文字関連エラーの解決&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;rubyをwindowsの環境で使おうとしたら出るエラーでした。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-10-23-blog-with-development-and-experience\build-error.png&quot; alt=&quot;ビルドエラー&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;vscodeからcmdでビルドしていたので、&lt;code class=&quot;highlighter-rouge&quot;&gt;chcp 65001&lt;/code&gt; でUTF-8に変えて解決しました。&lt;/p&gt;

&lt;p&gt;他には、jekyllをエラーが出ないバージョンに変更する方法もありますが、下記の問題でバージョンを制限するしかありませんでした。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimal Mistakesとpolyglot pluginを共に使用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ウェブページを正常に作れない問題が出ました。&lt;/p&gt;

&lt;p&gt;これについては色々トライし、次のように解決できました。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;jekyllバージョン制限&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;jekyllのバージョンを3.8.6としたら、polyglot pluginと共に動きました。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;polyglot pluginの_config.xml設定&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;\assets\images\2019-10-23-blog-with-development-and-experience\polyglot-setting.png&quot; alt=&quot;polyglot setting&quot; /&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;languagesの言語の一番目をdefault_langに設定したらpolyglot pluginがうまく動きました。&lt;/p&gt;

&lt;h1 id=&quot;機能追加&quot;&gt;機能追加&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;言語セレクタ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;マルチランゲージのサポートのため、言語を変更する機能を追加しました。&lt;/p&gt;

&lt;p&gt;ページの下にあるJAやKOなどのものです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;コメント&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Minimal Mistakesで提供する&lt;a href=&quot;https://disqus.com/&quot;&gt;disqus&lt;/a&gt;を利用し、実装しました。&lt;/p&gt;

&lt;h1 id=&quot;感想&quot;&gt;感想&lt;/h1&gt;

&lt;p&gt;多様な機能を実現してかなり時間が過ぎました。&lt;/p&gt;

&lt;p&gt;これからはポストも作成しつつ、また新しい機能を追加していきたいと思います。&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Oct 2019 00:00:00 +0900</pubDate><link>https://duinaru.github.io/ja/2019/10/23/blog-with-development-and-experience</link>
        <guid isPermaLink="true">https://duinaru.github.io/ja/2019/10/23/blog-with-development-and-experience</guid>
        
        <category>jekyll</category>
        
        <category>ruby</category>
        
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>